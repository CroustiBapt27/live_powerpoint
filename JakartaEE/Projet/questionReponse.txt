TODO 4.2.2. A quoi sert la partie publique du projet ? En quoi est –elle indispensable ?

TODO 4.2.3. Créer un fr.cpe.Model.EJB session MessageSender de type StateLess

TODO 4.2.4. Pourquoi est-il préférable de coché la case générer interface ?

TODO 4.2.5. Que représente Business Interface Remote ?

TODO 4.2.6. Que représente Business Interface Local ?

TODO 4.2.7. A l’aide des références ci-dessous compléter l’fr.cpe.Model.EJB session MessageSender compléter la
classe afin qu’elle puisse envoyer des messages dans le bus de données
"java:/jms/watcherAuthJMS")

TODO 4.2.8. Que Signifie @Stateless ?

Les beans de type stateless sont les plus simples et les plus véloces car le conteneur gère un pool d'instances qui sont utilisées au besoin, ce qui évite des opérations d'instanciation et de destruction à chaque utilisation. Ceci permet une meilleure montée en charge de l'application.
A stateless session bean as per its name does not have any associated client state, but it may preserve its instance state.

Les beans de type Stateful sont capables de conserver leur état durant toute leur utilisation par le client. Cet état n'est cependant pas persistant : les données sont perdues à la fin de son utilisation ou à l'arrêt du serveur. Un exemple type d'utilisation de ce type de bean est l'implémentation d'un caddie pour un site de vente en ligne.



TODO 4.2.9. Que Signifie @LocalBean ?


    @Remote : permet un accès à l'fr.cpe.Model.EJB depuis un client hors de la JVM
    @Local : permet un accès à l'fr.cpe.Model.EJB depuis un client dans la même JVM que celle de l'fr.cpe.Model.EJB


TODO 4.2.10. Que permet de faire l’annotation @Inject ?

Elle consiste à injecter dynamiquement les dépendances pour différentes classes en s'appuyant sur un ou plusieurs modules.
pour pouvoir utiliser l'injection de dépendances, il est obligatoire de penser l'architecture de son logiciel avec des interfaces et de coupler leurs implémentations grâce à des modules. En plus de permettre l'injection, c'est une bonne pratique de conception pour éviter des couplages forts entre différents modules d'un logiciel.



TODO 4.2.11. Que permet de faire l’annotation @Ressource?

@Resource 	javax.annotation 	Java
@Inject 	javax.inject 	Java
@Qualifier 	javax.inject 	Java



TODO 4.2.12. Quelle est la différence entre un Topic et une Queue ?
1.The point-to-point or queue model works by the sender to receiver setup. On the other hand, publisher/subscriber or topic model works by bulletin setup.

2.In the queue model there is acknowledgement of the identity of the receiver and oftentimes the sender. In the topic model there is anonymity in the identities of both the subscriber and publisher.

3.Queue model is only allowed one recipient; topic, on the other hand, can have multiple recipients.

4.In queue model, the sender and receiver do not have to be both active at the same time. In the topic model, timing is very vital.

5.In the queue model, the sender will receive a notification when the message gets to the receiver. The topic model, on the other hand, will not notify you with such, and there is even a risk that you will have no subscribers.

TODO 4.4.2. Pourquoi est-ce que les objets appelés sont « Local » ?
Dans la partie serveur != public

TODO 4.4.3. Quelle(s) modification(s) dans le projet doit-on effectuer afin de pouvoir utiliser
 TODO    MessageSenderLocal et MessageReceiverSyncLocal ?


TODO 5.1.1. Pourquoi ce projet n’a-t’il pas besoin de partie publique ?
pas besoin qu'il soit accessible de partout



TODO 5.1.2. Qu’est ce qu’un EJB message driven ?
An MDB is a component invoked by the container every time a message arrives on the messaging system. As a result, this event triggers the code inside this bean.

We can perform a lot of tasks inside an MDB onMessage() method, since showing the received data on a browser or parsing and saving it to a database.